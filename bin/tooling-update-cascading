#!/usr/bin/env ruby

require_relative "../source/tooling"

include Tooling::Context::Active

def message(text, level, scope)
  puts("  " * level + "[#{scope}] " + text)
end

def execute(command)
  puts(command)
  system(command) unless ENV["DRY"]
end

Tooling.command do |let|
  let.string "--root", "the root package you want to start with", default: "complete"
end

def pull_latest_from_github(package, level, scope)
  message("🐱 pulling #{package.name}@core and tags from github", level, scope)
  execute("cd ../#{package.name} && git pull origin core")
end

def push_latest_to_github(package, level, scope)
  message("🐱 pushing #{package.name}@core and tags to github", level, scope)
  execute("cd ../#{package.name} && git push --tags origin core")
end

def publish_missing_versions(package, level, scope)
  published = package.npm_versions.map { |version| "v#{version}" }
  tagged = `cd ../#{package.name} && git tag | xargs`.chomp.split(" ")

  (tagged - published).each do |tag|
    begin
      message("🆙 backfilling #{package.name}@#{tag} to npm", level, scope)
      execute("cd ../#{package.name} && git checkout #{tag} && npm publish")
    end
  end

  execute("cd ../#{package.name} && git checkout core")

  message("📡 setting #{package.name}@latest to #{package.current_version}", level, scope)
  execute("cd ../#{package.name} && npm dist-tag add @unction/#{package.name.downcase}@#{package.npm_latest_version} latest")
end


def update_unction_dependencies(package, level, scope)
  message("👮‍ Looking for any outdated dependencies", level, scope)
  outdated_unction_packages = package.
    outdated_unction_dependencies.
    map {|dependency| "#{dependency.fullname}@latest"}.
    grep(/^@unction/)

  message("ℹ️ Out of #{package.unction_dependencies.length} packages #{outdated_unction_packages.length} are outdated!", level, scope)

  if outdated_unction_packages.any?
    message("📩 updating #{outdated_unction_packages.join(" ")}", level, scope)
    execute("cd ../#{package.name} && npm install --no-progress --save #{outdated_unction_packages.join(" ")} > /dev/null")

    message("✍️ adding package.json and package-lock.json", level, scope)
    execute("cd ../#{package.name} && git add package.json package-lock.json > /dev/null")

    message("💾 committing changes", level, scope)
    execute("cd ../#{package.name} && git commit -m 'Upgrading @unction dependencies to latest' > /dev/null")
  end
end

def make_new_release(package, level, scope)
  return message("⏱ nothing new to publish", level, scope) unless package.different_from_last_tag?

  message("👊 upgrading #{package.name} (minor) to version #{package.current_version}", level, scope)
  execute("cd ../#{package.name} && npm version minor > /dev/null")

  message("🌎 publishing #{package.name}@#{package.current_version} to npm", level, scope)
  execute("cd ../#{package.name} && npm publish > /dev/null")

  message("📡 setting #{package.name}@latest to #{package.current_version}", level, scope)
  execute("cd ../#{package.name} && npm dist-tag add @unction/#{package.name.downcase}@#{package.npm_latest_version} latest")
end

def update_children_of(package, level)
  return if package.name == "_tempLate"
  message("👁 updating children", level, package.name)

  if @visited.include?(package.name)
    return message("⚠️ skipping", level + 1, package.name)
  end

  @visited << package.name

  return message("⚠️ no packages", level + 1, package.name) unless package.dependencies.any?

  package.unction_dependencies.each do |dependency|
    update_children_of(dependency, level + 1)
  end

  message("🕰 checking for outdated dependencies", level + 1, package.name)

  pull_latest_from_github(package, level, package.name)
  update_unction_dependencies(package, level, package.name)
  make_new_release(package, level, package.name)
  push_latest_to_github(package, level, package.name)
  publish_missing_versions(package, level, package.name)
end

@visited = []
update_children_of(Tooling::Package.new(Tooling.options["root"]), 1)
