#!/usr/bin/env ruby

require_relative "../source/tooling"

include Tooling::Context::Active

Tooling.command do |let|
  let.string "--root", "the root package you want to start with", default: "complete"
end

@visited = []
@level = 0

def update_children_of(package)
  return if package.name == "_tempLate"


  if @visited.include?(package.name)
    puts "skipping #{package.name}"
    return
  end

  @visited << package.name

  if package.dependencies.any?
    package.dependencies.each do |dependency|
      update_children_of(dependency)
    end

    puts "visiting #{package.name}"
    puts "  - 🕰 checking for outdated dependencies"
    outdated = package.
      outdated_dependencies.
      map {|dependency| "#{dependency.fullname}@latest"}.
      grep(/^@unction\/.+/)

    if outdated.any?
      list = outdated.join(" ")

      `cd ../#{package.name} && npm install --no-progress --save #{list} > /dev/null`
      puts "  - 📩 updating #{list}"

      `cd ../#{package.name} && git add package.json package-lock.json > /dev/null`
      puts "  - ✍️ adding package.json and package-lock.json"

      `cd ../#{package.name} && git commit -m "[ignore] cascading upgrade" > /dev/null`
      puts "  - 💾 committing changes"

      if package.different_from_last_tag?
        if package.ci_passes?
          puts `cd ../#{package.name} && git diff #{package.latest_tagged_version}`
          `say "Time to choose, Kurtis."`
          breakage = Tooling.interface.ask("How much did you break? (major, minor, patch)")
          `cd ../#{package.name} && npm version #{breakage} > /dev/null`
          puts "  - 👊 upgraded to version #{package.current_version} (#{breakage} bump)"
        else
          puts "  - ✋ ci did not pass"
        end

        if package.different_version_from_published?
          `cd ../#{package.name} && npm publish > /dev/null`
          puts "  - 🌎 publishing to npm"
        else
          puts "  - 🛑 could not publish"
        end
      else
        puts "  - ⏱ already published this version"
      end

      `cd ../#{package.name} && git push origin core &> /dev/null`
      puts "  - 😸 pushing to github"
    end
  end
end

update_children_of(Tooling::Package.new(Tooling.options["root"]))
