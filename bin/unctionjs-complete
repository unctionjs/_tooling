#!/usr/bin/env ruby

require_relative "../source/unctionjs"

include Unctionjs::Context::Regular

Unctionjs.command

documentation = File.read(File.join("data", "README.md"))
packages = noncomplete.map do |name|
  metadata = Oj.load(File.read(File.join("..", name, "package.json")))
  {
    import: "export {default as #{name}} from \"#{metadata["name"]}\"",
    readme: File.read(File.join("..", name, "README.md")).
      gsub(/^# @unction.+$/, "### [#{name}](https://github.com/unctionjs/#{name}#readme)()").
      gsub(/^> (.+)/, "```\n\\1\n```").
      gsub(/(\w+?)Type/, "\\1").
      gsub(/\|/, "\|"),
    dependency: {metadata["name"] => metadata["version"]}
  }
end.map(&OpenStruct.method(:new))

COMPLETE_README = <<README
# Æ’unction.js

![Tests](https://img.shields.io/travis/unctionjs/complete.svg?maxAge=2592000&style=flat-square)
![Stability](https://img.shields.io/badge/stability-strong-green.svg?maxAge=2592000&style=flat-square)
![Dependencies](https://img.shields.io/david/unctionjs/complete.svg?maxAge=2592000&style=flat-square)

The package containing all #{packages.length} individual @unctionjs packages as a single package. All functions are bound by three principles that are detailed below.

#{documentation}
README

# Write dependencies
File.write(
  File.join("..", "complete", "package.json"),
  JSON.pretty_generate(
    Oj.load(File.read(File.join("..", "complete", "package.json"))).
      merge({
        "dependencies" => packages.map(&:dependency).reduce(:merge)
      })
  ) + "\n"
)

# Write readme
File.write(
  File.join("..", "complete", "README.md"),
  COMPLETE_README + "\n" + packages.map(&:readme).join("\n") + "\n"
)

# Write readme
File.write(
  File.join("..", "complete", "index.js"),
  packages.map(&:import).join("\n") + "\n"
)

# Write website
File.write(
  File.join("..", "unctionjs.github.io", "index.md"),
  "{% raw %}" + COMPLETE_README + "\n" + packages.map(&:readme).join("\n") + "\n" + "{% endraw %}"
)
