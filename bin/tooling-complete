#!/usr/bin/env ruby

require_relative "../source/tooling"

include Tooling::Context::Active

Tooling.command

documentation = File.read(File.join("data", "README.md"))
packages = noncomplete.map do |name|
  metadata = Oj.load(File.read(File.join("..", name, "package.json")))
  {
    export: %(export {default as #{name}} from "#{metadata["name"]}"),
    import: %(import {#{name}} from "./"),
    test: %(test("#{name} is a function", ({type: assertType, end}) => {\n  assertType(#{name}, Function);\n  end();\n});),
    readme: File.read(File.join("..", name, "README.md")).
      gsub(/^# @unction.+$/, "### [#{name}](https://github.com/unctionjs/#{name}#readme)()").
      gsub(/^> (.+)/, "```\n\\1\n```").
      gsub(/(\w+?)Type/, "\\1").
      gsub(/\|/, "\|"),
    dependency: {metadata["name"] => metadata["version"]}
  }
end.map(&OpenStruct.method(:new))

puts("Writing dependencies")
File.write(
  File.join("..", "complete", "package.json"),
  JSON.pretty_generate(
    Oj.load(File.read(File.join("..", "complete", "package.json"))).
      merge({
        "dependencies" => packages.map(&:dependency).reduce(:merge)
      })
  ) + "\n"
)

puts("Writing readme")
File.write(
  File.join("..", "complete", "README.md"),
  documentation + "\n" + packages.map(&:readme).join("\n") + "\n"
)

puts("Writing index.js")
File.write(
  File.join("..", "complete", "index.js"),
  packages.map(&:export).join("\n") + "\n"
)

puts("Writing test.js")
File.write(
  File.join("..", "complete", "test.js"),
  %(import {test} from "tap";\n#{packages.map(&:import).join(";\n")};\n\n#{packages.map(&:test).join("\n\n")}\n)
)

puts("Writing website")
File.write(
  File.join("..", "unctionjs.github.io", "index.md"),
  "{% raw %}" + "\n" + documentation + "\n" + packages.map(&:readme).join("\n") + "\n" + "{% endraw %}" + "\n"
)
